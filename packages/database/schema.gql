"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Updates a single `Person` using its globally unique id and a patch."""
  updatePersonByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonByNodeIdInput!
  ): UpdatePersonPayload

  """Updates a single `Person` using a unique key and a patch."""
  updatePerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonInput!
  ): UpdatePersonPayload

  """
  Updates a single `PersonAccount` using its globally unique id and a patch.
  """
  updatePersonAccountByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonAccountByNodeIdInput!
  ): UpdatePersonAccountPayload

  """Updates a single `PersonAccount` using a unique key and a patch."""
  updatePersonAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonAccountInput!
  ): UpdatePersonAccountPayload

  """Updates a single `PersonAccount` using a unique key and a patch."""
  updatePersonAccountByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePersonAccountByEmailInput!
  ): UpdatePersonAccountPayload

  """
  Creates a JWT token that will securely identify a person and give them certain permissions.
  """
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload

  """Registers a single user and creates an account in our app."""
  registerPerson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterPersonInput!
  ): RegisterPersonPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""A connection to a list of `Person` values."""
type PeopleConnection {
  """A list of `Person` objects."""
  nodes: [Person]!

  """
  A list of edges which contains the `Person` and cursor to aid in pagination.
  """
  edges: [PeopleEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Person` you could get from the connection."""
  totalCount: Int!
}

"""A `Person` edge in the connection."""
type PeopleEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Person` at the end of the edge."""
  node: Person
}

"""Methods to use when ordering `Person`."""
enum PeopleOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  ABOUT_ASC
  ABOUT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Person implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The primary unique identifier for the person."""
  id: Int!

  """The person’s first name."""
  firstName: String!

  """The person’s last name."""
  lastName: String

  """A short description about the user, written by the user."""
  about: String

  """The time this person was created."""
  createdAt: Datetime
  updatedAt: Datetime

  """Reads a single `PersonAccount` that is related to this `Person`."""
  personAccountByPersonId: PersonAccount

  """Reads and enables pagination through a set of `PersonAccount`."""
  personAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonAccount`."""
    orderBy: [PersonAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonAccountCondition
  ): PersonAccountsConnection! @deprecated(reason: "Please use personAccountByPersonId instead")

  """
  A person’s full name which is a concatenation of their first and last name.
  """
  fullName: String
}

type PersonAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """The id of the person associated with this account."""
  personId: Int!

  """The email address of the person."""
  email: String!

  """An opaque hash of the person’s password."""
  passwordHash: String!

  """Reads a single `Person` that is related to this `PersonAccount`."""
  person: Person
}

"""
A condition to be used against `PersonAccount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PersonAccountCondition {
  """Checks for equality with the object’s `personId` field."""
  personId: Int

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String
}

"""
Represents an update to a `PersonAccount`. Fields that are set will be updated.
"""
input PersonAccountPatch {
  """The id of the person associated with this account."""
  personId: Int

  """The email address of the person."""
  email: String

  """An opaque hash of the person’s password."""
  passwordHash: String
}

"""A connection to a list of `PersonAccount` values."""
type PersonAccountsConnection {
  """A list of `PersonAccount` objects."""
  nodes: [PersonAccount]!

  """
  A list of edges which contains the `PersonAccount` and cursor to aid in pagination.
  """
  edges: [PersonAccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PersonAccount` you could get from the connection."""
  totalCount: Int!
}

"""A `PersonAccount` edge in the connection."""
type PersonAccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PersonAccount` at the end of the edge."""
  node: PersonAccount
}

"""Methods to use when ordering `PersonAccount`."""
enum PersonAccountsOrderBy {
  NATURAL
  PERSON_ID_ASC
  PERSON_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Person` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PersonCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `about` field."""
  about: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
Represents an update to a `Person`. Fields that are set will be updated.
"""
input PersonPatch {
  """The primary unique identifier for the person."""
  id: Int

  """The person’s first name."""
  firstName: String

  """The person’s last name."""
  lastName: String

  """A short description about the user, written by the user."""
  about: String

  """The time this person was created."""
  createdAt: Datetime
  updatedAt: Datetime
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Person`."""
  people(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonCondition
  ): PeopleConnection

  """Reads and enables pagination through a set of `PersonAccount`."""
  personAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PersonAccount`."""
    orderBy: [PersonAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PersonAccountCondition
  ): PersonAccountsConnection
  person(id: Int!): Person
  personAccount(personId: Int!): PersonAccount
  personAccountByEmail(email: String!): PersonAccount

  """Gets the person who was identified by our JWT."""
  currentPerson: Person

  """Reads a single `Person` using its globally unique `ID`."""
  personByNodeId(
    """The globally unique `ID` to be used in selecting a single `Person`."""
    nodeId: ID!
  ): Person

  """Reads a single `PersonAccount` using its globally unique `ID`."""
  personAccountByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PersonAccount`.
    """
    nodeId: ID!
  ): PersonAccount
}

"""All input for the `registerPerson` mutation."""
input RegisterPersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

"""The output of our `registerPerson` mutation."""
type RegisterPersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = PRIMARY_KEY_ASC
  ): PeopleEdge
}

"""All input for the `updatePersonAccountByEmail` mutation."""
input UpdatePersonAccountByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PersonAccount` being updated.
  """
  patch: PersonAccountPatch!

  """The email address of the person."""
  email: String!
}

"""All input for the `updatePersonAccountByNodeId` mutation."""
input UpdatePersonAccountByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PersonAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PersonAccount` being updated.
  """
  patch: PersonAccountPatch!
}

"""All input for the `updatePersonAccount` mutation."""
input UpdatePersonAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PersonAccount` being updated.
  """
  patch: PersonAccountPatch!

  """The id of the person associated with this account."""
  personId: Int!
}

"""The output of our update `PersonAccount` mutation."""
type UpdatePersonAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PersonAccount` that was updated by this mutation."""
  personAccount: PersonAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Person` that is related to this `PersonAccount`."""
  person: Person

  """An edge for our `PersonAccount`. May be used by Relay 1."""
  personAccountEdge(
    """The method to use when ordering `PersonAccount`."""
    orderBy: [PersonAccountsOrderBy!] = PRIMARY_KEY_ASC
  ): PersonAccountsEdge
}

"""All input for the `updatePersonByNodeId` mutation."""
input UpdatePersonByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Person` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!
}

"""All input for the `updatePerson` mutation."""
input UpdatePersonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Person` being updated.
  """
  patch: PersonPatch!

  """The primary unique identifier for the person."""
  id: Int!
}

"""The output of our update `Person` mutation."""
type UpdatePersonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Person` that was updated by this mutation."""
  person: Person

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Person`. May be used by Relay 1."""
  personEdge(
    """The method to use when ordering `Person`."""
    orderBy: [PeopleOrderBy!] = PRIMARY_KEY_ASC
  ): PeopleEdge
}
